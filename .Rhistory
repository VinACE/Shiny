pie <-  pie + scale_fill_brewer("Blues") +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/3 + c(0, cumsum(value)[-length(value)]),
label = percent(value/100)), size=5)
pie
# Use brewer palette
pie <-  pie + scale_fill_brewer("Blues") +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/3 + c(0, cumsum(value)[-length(value)]),
label = percent(value/100)), size=5) + coord_polar(theta='y')
pie <-  pie + scale_fill_brewer("Blues") +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/3 + c(0, cumsum(value)[-length(value)]),
label = percent(value/100)), size=5) + coord_polar()
# Use brewer palette
pie <-  pie + scale_fill_brewer("Blues") +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/3 + c(0, cumsum(value)[-length(value)]),
label = percent(value/100)), size=5) + coord_polar()
tx_dist <- read.csv("D:/Treselle_V/DS/25K/graph/TX_Ticker_Dist.xlsx, header = TRUE)
tx_dist <- read.csv("D:/Treselle_V/DS/25K/graph/TX_Ticker_Dist.xlsx", header = TRUE)
tx_dist
tx_dist <- read.csv("D:/Treselle_V/DS/25K/graph/TX_Ticker_Dist.xlsx", header = TRUE)
tx_dist <- read.csv("D:/Treselle_V/DS/25K/graph/TX_Ticker_Dist.csv", header = TRUE)
tx_dist
p <- ggplot(tx_dist, aes(x=1, y=Count, fill= 1)) +
geom_bar(stat="identity") +
ggtitle("TX Ticker Distribution")
print(p)
p <- ggplot(tx_dist, aes(x=1, y = Count, fill= Count)) +
geom_bar(stat="identity") +
ggtitle("TX Ticker Distribution")
print(p)
p <- ggplot(tx_dist, aes(x=1, y = Count, fill= Ticker_type)) +
geom_bar(stat="identity") +
ggtitle("TX Ticker Distribution")
print(p)
pie <-  pie + scale_fill_brewer("Blues") +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/3 + c(0, cumsum(value)[-length(value)]),
label = percent(value/100)), size=5) + coord_polar()
# Use brewer palette
pie <-  pie + scale_fill_brewer("Blues") +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/3 + c(0, cumsum(value)[-length(value)]),
label = percent(value/100)), size=5)
p <- ggplot(df, aes(x=1, y = Count, fill = Ticker_type)) +
ggtitle("TX Ticker Distribution") +
coord_polar(theta='y')
p <- p +
# black border around pie slices
geom_bar(stat="identity", color='black') +
# remove black diagonal line from legend
guides(fill=guide_legend(override.aes=list(colour=NA)))
print(p)
p <- ggplot(tx_dist, aes(x=1, y = Count, fill = Ticker_type)) +
ggtitle("TX Ticker Distribution") +
coord_polar(theta='y')
p <- p +
# black border around pie slices
geom_bar(stat="identity", color='black') +
# remove black diagonal line from legend
guides(fill=guide_legend(override.aes=list(colour=NA)))
print(p)
p <- p +
# black border around pie slices
geom_bar(stat="identity", color='black') +
# remove black diagonal line from legend
guides(fill=guide_legend(override.aes=list(colour=NA))) + scale_y_continuous(
breaks=y.breaks,   # where to place the labels
labels=tx_dist$Ticker_type # the labels
)
print(p)
p <- p +
# black border around pie slices
geom_bar(stat="identity", color='black') +
# remove black diagonal line from legend
guides(fill=guide_legend(override.aes=list(colour=NA))) + scale_y_continuous(
#     breaks=y.breaks,   # where to place the labels
labels=tx_dist$Ticker_type # the labels
)
print(p)
p <- p +
# black border around pie slices
geom_bar(stat="identity", color='black') +
# remove black diagonal line from legend
guides(fill=guide_legend(override.aes=list(colour=NA))) + scale_y_continuous(
breaks=y.breaks,   # where to place the labels
labels=tx_dist$Ticker_type # the labels
)
print(p)
p <- p +
# black border around pie slices
geom_bar(stat="identity", color='black') +
# remove black diagonal line from legend
guides(fill=guide_legend(override.aes=list(colour=NA))) + scale_y_continuous(
breaks=y.breaks,   # where to place the labels
labels=tx_dist$Ticker_type # the labels
)
print(p)
p <- ggplot(tx_dist, aes(x=1, y = Count, fill = Ticker_type)) +
ggtitle("TX Ticker Distribution") +
coord_polar(theta='y')
p
p <- ggplot(tx_dist, aes(x=1, y = Count, fill = Ticker_type)) +
ggtitle("TX Ticker Distribution") +
coord_polar(theta='y')
p
p <- ggplot(tx_dist, aes(x=1, y = Count, fill = Ticker_type)) +
ggtitle("TX Ticker Distribution") +
coord_polar(theta='y')
p <- p +
# black border around pie slices
geom_bar(stat="identity", color='black')
p
adf.test(EOG_ts, alternative ="stationary")
library(tseries)
adf.test(EOG_ts, alternative ="stationary")
library(DBI)
library(RMySQL)
library(dplyr)
library(xts) # xts is a superset of zoo
# library(zoo)
library(forecast)
library(tseries)
ticker_perf_EOG <- read.csv("D:/Treselle_V/DS/Ticker_performance/ticker_perf_EOG.csv", header = TRUE, sep = ",")
ticker_perf_BHP <- read.csv("D:/Treselle_V/DS/Ticker_performance/ticker_perf_BHP.csv", header = TRUE, sep = ",")
EOG_ts <- xts(ticker_perf_EOG[,-1], order.by = as.POSIXct(ticker_perf_EOG$date_time))
BHP_ts <- xts(ticker_perf_BHP[,-1], order.by = as.POSIXct(ticker_perf_BHP$date_time))
# to get the core values( original values before converting to a time series object)
coredata(BHP_ts)
plot.xts(EOG_ts, type="l")
plot.xts(BHP_ts, type="l")
acf(ticker_perf_EOG)
pacf(ticker_perf_EOG)
Box.test(ticker_perf_EOG$price)
acf(ticker_perf_BHP)
pacf(ticker_perf_BHP)
Box.test(ticker_perf_BHP$price)
source('D:/Treselle_V/DS/Ticker_performance/time_series_forcast_01_05_06_2015.R')
ticker_perf_EOG <- read.csv("D:/Treselle_V/DS/Ticker_performance/ticker_perf_EOG.csv", header = TRUE, sep = ",")
ticker_perf_BHP <- read.csv("D:/Treselle_V/DS/Ticker_performance/ticker_perf_BHP.csv", header = TRUE, sep = ",")
summary(ticker_perf_EOG)
summary(ticker_perf_BHP)
EOG_ts <- xts(ticker_perf_EOG[,-1], order.by = as.POSIXct(ticker_perf_EOG$date_time))
BHP_ts <- xts(ticker_perf_BHP[,-1], order.by = as.POSIXct(ticker_perf_BHP$date_time))
plot.xts(BHP_ts, type="l")
plot.xts(EOG_ts, type="l")
auto.arima(ticker_perf_EOG$price, ic = "aic")
m1 <- arima(ticker_perf_EOG$price, order=c(0,1,1))
m1
auto.arima(ticker_perf_BHP$price, ic = "bic")
m2 <- arima(ticker_perf_EOG$price, order=c(1,1,1))
m2
tsdiag(m2)
auto.arima(ticker_perf_EOG$price, ic = "aic")
m <- auto.arima(ticker_perf_EOG$price, ic = "aic")
m
m$coef
m$arma
m$mask
m$call
m$coef
m$sigma2
m$var.coef
m$loglik
m$arma
m$series
m$code
m$model
m$x
m1$sigma2
m1$model
m1$model$Z
m1$arma
m1$series
m1$code
m1$n.cond
m1$model
m1$model
EOG_arimapqd <- arima(ticker_perf_EOG$price, order = c(0,1,1))
EOG_arimapqd <- arima(ticker_perf_EOG$price, order = c(0,1,1))
EOG_pred1 <- predict(EOG_arimapqd, n.ahead=100)
plot (ticker_perf_EOG$price)
lines(EOG_pred1$pred, col="blue")
lines(EOG_pred1$pred+2*mydata.pred1$se, col="red")
lines(EOG_pred1$pred-2*mydata.pred1$se, col="red")
lines(EOG_pred1$pred+2*mydata.pred1$se, col="red")
EOG_arimapqd <- arima(ticker_perf_EOG$price, order = c(0,1,1))
EOG_pred1 <- predict(EOG_arimapqd, n.ahead=100)
plot (ticker_perf_EOG$price)
lines(EOG_pred1$pred, col="blue")
lines(EOG_pred1$pred+2*EOG_pred1$se, col="red")
lines(EOG_pred1$pred-2*EOG_pred1$se, col="red")
# ARIMA(p,q,d) forecasting  for EOG ticker
BHP_arimapqd <- arima(ticker_perf_BHP$price, order = c(0,1,1))
BHP_pred1 <- predict(BHP_arimapqd, n.ahead=100)
plot (ticker_perf_BHP$price)
lines(BHP_pred1$pred, col="blue")
lines(BHP_pred1$pred+2*BHP_pred1$se, col="red")
lines(BHP_pred1$pred-2*BHP_pred1$se, col="red")
mydata.arima111 <- arima(d.Y, order = c(1,0,1))
mydata.pred1 <- predict(mydata.arima111, n.ahead=100)
plot (d.Y)
lines(mydata.pred1$pred, col="blue")
lines(mydata.pred1$pred +2*mydata.pred1$se, col="red")
lines(mydata.pred1$pred -2*mydata.pred1$se, col="red")
mydata.arima111 <- arima(d.Y, order = c(1,0,1))
mydata.pred1 <- predict(mydata.arima111, n.ahead=100)
plot (d.Y)
lines(mydata.pred1$pred, col="blue")
lines(mydata.pred1$pred + 2 * mydata.pred1$se, col="red")
lines(mydata.pred1$pred - 2 * mydata.pred1$se, col="red")
mydata.arima111 <- arima(d.Y, order = c(1,0,1))
mydata.pred1 <- predict(mydata.arima111, n.ahead=100)
plot (d.Y)
lines(mydata.pred1$pred, col="blue")
lines(mydata.pred1$pred + 2*mydata.pred1$se, col="red")
lines(mydata.pred1$pred - 2*mydata.pred1$se, col="red")
mydata.arima111 <- arima(d.Y, order = c(1,0,1))
mydata.pred1 <- predict(mydata.arima111, n.ahead=100)
plot (d.Y)
lines(mydata.pred1$pred, col="blue")
lines(mydata.pred1$pred+2*mydata.pred1$se, col="red")
lines(mydata.pred1$pred-2*mydata.pred1$se, col="red")
BHP_arimapqd <- arima(ticker_perf_BHP$price, order = c(0,1,1))
BHP_pred1 <- predict(BHP_arimapqd, n.ahead=100)
plot (ticker_perf_BHP$price)
lines(BHP_pred1$pred, col="blue")
lines(BHP_pred1$pred + 2 * BHP_pred1$se, col="red")
lines(BHP_pred1$pred - 2 * BHP_pred1$se, col="red")
EOG_arimapqd <- arima(ticker_perf_EOG$price, order = c(0,1,1))
EOG_pred1 <- predict(EOG_arimapqd, n.ahead=100)
plot (ticker_perf_EOG$price)
lines(EOG_pred1$pred, col="blue")
lines(EOG_pred1$pred + 2 * EOG_pred1$se, col="red")
lines(EOG_pred1$pred - 2 * EOG_pred1$se, col="red")
as1_train <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-training.csv", header = TRUE, sep = ",")
as1_train <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-training.csv", header = TRUE, sep = ",")
summary(as1_train)
as1_test <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-testing.csv", header = TRUE, sep = ",")
summary(as1_test)
head(as1_test, n=2)
summary(as1_train$classe)
summary(as1_train$classe)
as1_test <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-testing.csv", header = TRUE, sep = ",")
summary(as1_test)
libarary(rattle)
library(rattle)
rattle()
PCAAnalysis <- prcomp(as1_train, scale.=TRUE)
PCAAnalysis <- prcomp(as1_train, scale.=TRUE)
PCAAnalysis <- prcomp(as1_train)
PCA_Analaysis <- prcomp(as1_train, scale.=TRUE)
as1_test <- as.matrix( read.table("as1_test",header=TRUE,row.names=1) )
as1_test <- as.matrix( read.table("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-training.csv",header=TRUE,row.names=1) )
pca_analaysis <- prcomp(as1_test, scale.=TRUE)
prcomp(as1_test, scale.=TRUE)
str(as1_test)
colnames(as1_test)
summary(as1_test)
sapply(my.data, class
)
sapply(as1_test, class)
sapply(as1_test, class(colnames))
sapply(as1_test, className)
sapply(as1_test, class)
str(as1_test)
head(as1_test, n=1)
as1_test.sub2 <- subset(as1_test, select = c(user_name,num_window,roll_belt,pitch_belt,yaw_belt,total_accel_belt,kurtosis_roll_belt,kurtosis_picth_belt,kurtosis_yaw_belt,skewness_roll_belt,skewness_roll_belt.1,
skewness_yaw_belt,gyros_belt_x,gyros_belt_y,gyros_belt_z,accel_belt_x,accel_belt_y,accel_belt_z,magnet_belt_x,magnet_belt_y,magnet_belt_z,roll_arm,pitch_arm,
yaw_arm,total_accel_arm,gyros_arm_x,gyros_arm_y,gyros_arm_z,accel_arm_x,accel_arm_y,accel_arm_z,magnet_arm_x,magnet_arm_y,magnet_arm_z,
roll_dumbbell,pitch_dumbbell,yaw_dumbbell,kurtosis_roll_dumbbell,kurtosis_picth_dumbbell,kurtosis_yaw_dumbbell,skewness_roll_dumbbell,
skewness_pitch_dumbbell,skewness_yaw_dumbbell,total_accel_dumbbell,gyros_dumbbell_x,gyros_dumbbell_y,gyros_dumbbell_z,accel_dumbbell_x,
accel_dumbbell_y,accel_dumbbell_z,magnet_dumbbell_x,magnet_dumbbell_y,magnet_dumbbell_z,roll_forearm,pitch_forearm,yaw_forearm,total_accel_forearm,
gyros_forearm_x,gyros_forearm_y,gyros_forearm_z,accel_forearm_x,accel_forearm_y,accel_forearm_z,magnet_forearm_x,magnet_forearm_y,magnet_forearm_z,problem_id
))
as1_test.sub2 <- subset(as1_test, select = c(user_name,num_window,roll_belt,pitch_belt,yaw_belt,total_accel_belt,kurtosis_roll_belt,kurtosis_picth_belt,kurtosis_yaw_belt,skewness_roll_belt,skewness_roll_belt.1,
skewness_yaw_belt,gyros_belt_x,gyros_belt_y,gyros_belt_z,accel_belt_x,accel_belt_y,accel_belt_z,magnet_belt_x,magnet_belt_y,magnet_belt_z,roll_arm,pitch_arm,yaw_arm,total_accel_arm,gyros_arm_x,gyros_arm_y,gyros_arm_z,accel_arm_x,accel_arm_y,accel_arm_z,magnet_arm_x,magnet_arm_y,magnet_arm_z,roll_dumbbell,pitch_dumbbell,yaw_dumbbell,kurtosis_roll_dumbbell,kurtosis_picth_dumbbell,kurtosis_yaw_dumbbell,skewness_roll_dumbbell,skewness_pitch_dumbbell,skewness_yaw_dumbbell,total_accel_dumbbell,gyros_dumbbell_x,gyros_dumbbell_y,gyros_dumbbell_z,accel_dumbbell_x,accel_dumbbell_y,accel_dumbbell_z,magnet_dumbbell_x,magnet_dumbbell_y,magnet_dumbbell_z,roll_forearm,pitch_forearm,yaw_forearm,total_accel_forearm,
gyros_forearm_x,gyros_forearm_y,gyros_forearm_z,accel_forearm_x,accel_forearm_y,accel_forearm_z,magnet_forearm_x,magnet_forearm_y,magnet_forearm_z,problem_id
))
as1_test.sub2 <- as1_test[, c(user_name,num_window,roll_belt,pitch_belt,yaw_belt,total_accel_belt,kurtosis_roll_belt,kurtosis_picth_belt,kurtosis_yaw_belt,skewness_roll_belt,skewness_roll_belt.1,
skewness_yaw_belt,gyros_belt_x,gyros_belt_y,gyros_belt_z,accel_belt_x,accel_belt_y,accel_belt_z,magnet_belt_x,magnet_belt_y,magnet_belt_z,roll_arm,pitch_arm,
yaw_arm,total_accel_arm,gyros_arm_x,gyros_arm_y,gyros_arm_z,accel_arm_x,accel_arm_y,accel_arm_z,magnet_arm_x,magnet_arm_y,magnet_arm_z,
roll_dumbbell,pitch_dumbbell,yaw_dumbbell,kurtosis_roll_dumbbell,kurtosis_picth_dumbbell,kurtosis_yaw_dumbbell,skewness_roll_dumbbell,
skewness_pitch_dumbbell,skewness_yaw_dumbbell,total_accel_dumbbell,gyros_dumbbell_x,gyros_dumbbell_y,gyros_dumbbell_z,accel_dumbbell_x,
accel_dumbbell_y,accel_dumbbell_z,magnet_dumbbell_x,magnet_dumbbell_y,magnet_dumbbell_z,roll_forearm,pitch_forearm,yaw_forearm,total_accel_forearm,
gyros_forearm_x,gyros_forearm_y,gyros_forearm_z,accel_forearm_x,accel_forearm_y,accel_forearm_z,magnet_forearm_x,magnet_forearm_y,magnet_forearm_z,problem_id)
]
as1_test.sub2 <- as1_test[, c(num_window,roll_belt,pitch_belt,yaw_belt,total_accel_belt,kurtosis_roll_belt,kurtosis_picth_belt,kurtosis_yaw_belt,skewness_roll_belt,skewness_roll_belt.1,
skewness_yaw_belt,gyros_belt_x,gyros_belt_y,gyros_belt_z,accel_belt_x,accel_belt_y,accel_belt_z,magnet_belt_x,magnet_belt_y,magnet_belt_z,roll_arm,pitch_arm,
yaw_arm,total_accel_arm,gyros_arm_x,gyros_arm_y,gyros_arm_z,accel_arm_x,accel_arm_y,accel_arm_z,magnet_arm_x,magnet_arm_y,magnet_arm_z,
roll_dumbbell,pitch_dumbbell,yaw_dumbbell,kurtosis_roll_dumbbell,kurtosis_picth_dumbbell,kurtosis_yaw_dumbbell,skewness_roll_dumbbell,
skewness_pitch_dumbbell,skewness_yaw_dumbbell,total_accel_dumbbell,gyros_dumbbell_x,gyros_dumbbell_y,gyros_dumbbell_z,accel_dumbbell_x,
accel_dumbbell_y,accel_dumbbell_z,magnet_dumbbell_x,magnet_dumbbell_y,magnet_dumbbell_z,roll_forearm,pitch_forearm,yaw_forearm,total_accel_forearm,
gyros_forearm_x,gyros_forearm_y,gyros_forearm_z,accel_forearm_x,accel_forearm_y,accel_forearm_z,magnet_forearm_x,magnet_forearm_y,magnet_forearm_z,problem_id)
]
colname(as1_test)
colname(as1_train)
colnames(as1_train)
colnames(as1_train$user_name)
(as1_train$user_name)
as1.test.sub2 < as1_test[, c(user_name)]
as1.test.sub2 <- as1_test[, c(user_name)]
as1.test.sub2 <- as1_test[, c(1,2)]
colnames(as1.test.sub2)
x.sub2 <- subset(as1_test,  select = c(V1, V4))
x.sub2 <- subset(as1_test,  select = c(1, 4))
x.sub2 <- subset(as1_test,  select = c(14))
x.sub2 <- subset(as1_test,  select = c(1,3,4))
as1_train <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-training.csv", header = TRUE, sep = ",")
colnames(as1_train)
as1_train <- as.matrix( read.table("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-training.csv",header=TRUE,row.names=1) )
colnames(as1_train)
as1_train <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-training.csv", header = TRUE, sep = ",")
pca_analaysis <- prcomp(as1_test, scale.=TRUE)
pca_analaysis <- prcomp(as1_train, scale.=TRUE)
as1_train <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-training.csv", header = TRUE, sep = ",")
pca_analaysis <- prcomp(as1_train, scale.=TRUE)
as1_train <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-training.csv", header = TRUE, sep = ",")
pca_analaysis <- prcomp(as1_train, scale.=TRUE)
as1_train <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-training.csv", header = TRUE, sep = ",")
pca_analaysis <- prcomp(as1_train, scale.=TRUE)
summary(pca_analaysis)
pca_analaysis$sdev
pca_analaysis$scale
blackscholes(100,110,.05,1,.2)
blackscholes(100,110,.05,1,.2)
blackscholes(100,110,.05,1,.2)
as1_test <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-testing.csv", header = TRUE, sep = ",")
as1_train
as1_train <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-training_01.csv", header = TRUE, sep = ",")
as1_train
as1_train
as1_train <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-training_01.csv", header = TRUE, sep = ",")
as1_train$classe
table(as1_train$classe)
round(prop.table(table(as1_train$classe)) * 100, digits = 1)
table(as1_train$classe)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
as1_train_n <- as.data.frame(lapply(as1[1:53], normalize))
as1_train_n <- as.data.frame(lapply(as1_train[1:53], normalize))
head(as1_train_n,1)
install.packages("class")
library(class)
as1_train_labels <- as1_train[, 54]
as1_train_labels
as1_train_labels <- as1_train[1:length(as1_train), 54]
as1_train_labels
as1_train
as1_train$classe
as1_train_labels <- as1_train$classe[1:length(as1_train), 54]
as1_train_labels <- as1_train$classe[1:length(as1_train$classe), 54]
as1_train_labels <- as1_train$classe
as1_train_labels
as1_test <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-testing.csv", header = TRUE, sep = ",")
as1_test$classe
sumamary(as1_train)
summary(as1_train)
summary(as1_test)
ncol(as1_test)
ncol(as1_train)
as1_test <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-testing.csv", header = TRUE, sep = ",")
as1_train_n <- as.data.frame(lapply(as1_train[1:54], normalize))
colnames(as1_train)
colnames(as1_train_n)
as1_test_n <- as.data.frame(lapply(as1_test[1:54], normalize))
as1_test <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-testing.csv", header = TRUE, sep = ",")
colnames(as1_test_n)
as1_test <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-testing.csv", header = TRUE, sep = ",")
as1_test_n <- as.data.frame(lapply(as1_test[1:54], normalize))
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
as1_test_n <- as.data.frame(lapply(as1_test[1:54], normalize))
stop(sQuote(.Generic), " not meaningful for factors")
as1_test_n <- as.data.frame(lapply(as1_test[1:53], normalize))
as1_test_n <- as.data.frame(lapply(as1_test[1:54], normalize))
as1_test <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-testing.csv", header = TRUE, sep = ",")
as1_test <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-testing.csv", header = TRUE, sep = ",")
as1_test_n <- as.data.frame(lapply(as1_test[1:54], normalize))
as1_pred <- knn(train = as1_train[1:53], test = as1_test_n,cl = as1_train_labels, k=5)
as1_pred <- knn(train = as1_train[1:53], test = as1_test_n[1:53],cl = as1_train_labels, k=5)
as1_train_n <- na.omit(as1_train_n)
as1_test_n <- na.omit(as1_test_n)
as1_pred <- knn(train = as1_train[1:53], test = as1_test_n[1:53],cl = as1_train_labels, k=5)
as1_pred
as1_pred$
a
head(as1_pred)
as1_test_n
install.packages("gmodels")
as1_test_labels <- as1_test$classe
library(gmodels)
as1_test_labels <- as1_test$classe
library(gmodels)
CrossTable(x = as1_test_labels, y = as1_pred,
prop.chisq=FALSE)
CrossTable(x = as1_test_labels, y = as1_test_pred,
prop.chisq=FALSE)
as1_train_n <- na.omit(as1_train_n)
as1_test_n <- na.omit(as1_test_n)
p
summary(as1_train_n)
tail(as1_train_n)
tail(as1_test_n)
tail(as1_test_n$new_window)
as1_test_n <- as.data.frame(lapply(as1_test[1:54], normalize))
as1_test_n
as1_train_labels <- as1_train$classe
as1_test_labels <- as1_test$classe
as1_train_n <- na.omit(as1_train_n)
as1_test_n <- na.omit(as1_test_n
)
as1_test_n
as1_test_n
as1_test <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-testing.csv", header = TRUE, sep = ",")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
as1_train_n <- as.data.frame(lapply(as1_train[1:54], normalize))
as1_test_n <- as.data.frame(lapply(as1_test[1:54], normalize))
as1_test_labels <- as1_test$classe
as1_test_labels
as1_train_labels
as1_test_labels
as1_test$classe
as1_train_n <- na.omit(as1_train_n)
as1_test_n <- na.omit(as1_test_n)
as1_train_n <- na.omit(as1_train_n)
as1_test_n <- na.omit(as1_test_n)
as1_test_n
as1_test_n <- as.data.frame(lapply(as1_test[1:54], normalize))
as1_test_n
as1_test_n <- na.omit(as1_test_n)
as1_test_n
as1_test_n <- as.data.frame(lapply(as1_test[1:54], normalize))
as1_test_n
as1_test_labels <- as1_test$classe
as1_test_labels
as1_pred <- knn(train = as1_train_n, test = as1_test_n, cl = as1_train_labels, k=5)
library(class)
as1_pred <- knn(train = as1_train_n, test = as1_test_n, cl = as1_train_labels, k=5)
as1_train_n <- na.omit(as1_train_n)
as1_pred <- knn(train = as1_train_n, test = as1_test_n, cl = as1_train_labels, k=5)
`is.na<-`(as1_test_n)
`is.na<-`(as1_train_n)
as1_train <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-training_01.csv", header = TRUE, sep = ",")
as1_test <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-testing.csv", header = TRUE, sep = ",")
round(prop.table(table(as1_train$classe)) * 100, digits = 1)
round(prop.table(table(as1_test$classe)) * 100, digits = 1)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
as1_train_n <- as.data.frame(lapply(as1_train[1:54], normalize))
as1_test_n <- as.data.frame(lapply(as1_test[1:54], normalize))
as1_train_n
as1_test_n
as1_train_n1 <- na.omit(as1_train_n)
as1_pred <- knn(train = as1_train_n, test = as1_test_n, cl = as1_train_labels, k=5)
as1_train_n1
as1_test_n1 <- na.omit(as1_test_n)
as1_test_n1
as1_test_n
as1_test <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-testing.csv", header = TRUE, sep = ",")
as1_test_n <- as.data.frame(lapply(as1_test[1:54], normalize))
head(as1_test)
as1_test_n1 <- na.omit(as1_test_n)
as1_test_n1
as1_test <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-testing.csv", header = TRUE, sep = ",")
as1_test_n1 <- na.omit(as1_test_n)
head(as1_test_n1, 1)
as1_test_n
as1_test <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-testing.csv", header = TRUE, sep = ",")
as1_test
as1_test_n <- as.data.frame(lapply(as1_test[1:54], normalize))
as1_test_n
as1_test <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-testing.csv", header = TRUE, sep = ",")
as1_test_n <- as.data.frame(lapply(as1_test[1:54], normalize))
as1_test_n1 <- na.omit(as1_test_n)
as1_test_n1 <- na.omit(as1_test_n)
as1_test_n
as1_pred <- knn(train = as1_train_n1, test = as1_test_n, cl = as1_train_labels, k=5)
library(gmodels)
as1_test_pred <- knn(train = as1_train_n1, test = wbcd_test_n,
cl = as1_train_labels, k=5)
as1_test_pred <- knn(train = as1_train_n1, test = as1_test_n,
cl = as1_train_labels, k=5)
as1_test_pred
as1_test_pred
as1_test_pred
library(gmodels)
as1_test_labels
CrossTable(x = as1_test_labels, y = as1_test_pred,
prop.chisq=FALSE)
as1_train <- read.csv("D:/course_era/DataScience_specialization/practical machinelearning/assignment1/pml-training_01.csv", header = TRUE, sep = ",")
as1_train <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-training_01.csv", header = TRUE, sep = ",")
as1_train <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-training_01.csv", header = TRUE, sep = ",")
####after cleaning the dataset we have around 54 columns from 159 columns..
ncol(as1_train)
pca_analysis <- prcomp(as1_train, scale.=TRUE)
colnames((as1_train))
pca_analysis <- prcomp(as1_train[1:54], scale.=TRUE)
z1 <- c(-10,-12,-14,-16,-18,-20,-11,-12,-26,12,-30)
as1_train <- read.csv("D:/course_era/DataScience_specialization/practical machine learning/assignment1/pml-training_01.csv", header = TRUE, sep = ",")
setwd("D:/course_era/DataScience_specialization/devdataprod/Shiny/")
getwd()
